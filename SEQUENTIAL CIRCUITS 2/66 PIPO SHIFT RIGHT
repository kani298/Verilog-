module pipo_right_shift (
    input wire clk,
    input wire reset,
    input wire load,
    input wire [3:0] data_in,
    output reg [3:0] q
);
    always @(posedge clk or posedge reset) begin
        if (reset)
            q <= 4'b0000;
        else if (load)
            q <= data_in;  
        else
            q <= {1'b0, q[3:1]};  
    end
endmodule




module pipo_shift_reg (
    input wire clk,
    input wire rst,
    input wire load,               // 1 = load parallel data
    input wire [3:0] data_in,      // 4-bit parallel input
    output reg [3:0] q             // 4-bit parallel output
);

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            q <= 4'b0000;                  // Reset clears the register
        end else if (load) begin
            q <= data_in;                  // Load parallel data
        end else begin
            q <= q >> 1;                   // Right shift on every clock
        end
    end

endmodule

