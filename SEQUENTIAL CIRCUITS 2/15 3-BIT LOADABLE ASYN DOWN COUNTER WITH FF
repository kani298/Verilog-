
module tff (
    output reg q,
    input clk,
    input reset,
    input load,
    input data_in,
    input t
);
    always @(negedge clk or negedge reset) begin
        if (!reset)
            q <= 1'b0;
        else if (load)
            q <= data_in;
        else if(t)
            q <= ~q;
    end
endmodule

module loadable_async_down_counter_3bit (
    input clk,
    input reset,
    input load,
    input [2:0] data_in,
    output [2:0] qbar
);

    wire t=1'b1;
    wire q0,q1,q2;
    wire clk1,clk2;
    assign clk1=q0;
    assign clk2=q1;

    tff t0(q0, clk,    reset, load, data_in[0],t);
    tff t1(q1, clk1,  reset, load, data_in[1],t);
    tff t2(q2, clk2,  reset, load, data_in[2],t);
    
    assign qbar=~{q2,q1,q0};

endmodule

