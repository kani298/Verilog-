module tff (
    output reg q,
    input clk,
    input reset,       
    input load,
    input data_in
);
    always @(negedge clk or negedge reset) begin
        if (!reset)
            q <= 1'b1;            
        else if (load)
            q <= data_in;
        else
            q <= ~q;
    end
endmodule

module loadable_async_updown_counter_3bit_ff (
    input clk,
    input reset,              
    input load,
    input up_down,             
    input [2:0] data_in,
    output [2:0] q
);

    wire [2:0] nq;
    assign nq = ~q;

   
    wire clk1 = (up_down == 0) ? q[0]  : nq[0];
    wire clk2 = (up_down == 0) ? q[1]  : nq[1];

    
    tff t0(q[0], clk,  reset, load, data_in[0]);
    tff t1(q[1], clk1, reset, load, data_in[1]);
    tff t2(q[2], clk2, reset, load, data_in[2]);

endmodule
