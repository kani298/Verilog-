module loadable_async_updown_counter_3bit (
    input wire clk,
    input wire reset,
    input wire load,
    input wire up_down,           
    input wire [2:0] data_in,
    output reg [2:0] q
);

    wire clk1 = (up_down == 0) ? q[0] : ~q[0]; 
    wire clk2 = (up_down == 0) ? q[1] : ~q[1]; 

    
    always @(negedge clk or negedge reset) begin
        if (!reset)
            q[0] <= (up_down) ? 1'b1 : 1'b0;
        else if (load)
            q[0] <= data_in[0];
        else
            q[0] <= ~q[0];
    end

  
    always @(negedge clk1 or negedge reset) begin
        if (!reset)
            q[1] <= (up_down) ? 1'b1 : 1'b0;
        else if (load)
            q[1] <= data_in[1];
        else
            q[1] <= ~q[1];
    end

  
    always @(negedge clk2 or negedge reset) begin
        if (!reset)
            q[2] <= (up_down) ? 1'b1 : 1'b0;
        else if (load)
            q[2] <= data_in[2];
        else
            q[2] <= ~q[2];
    end

endmodule
