module piso_left_shift (
    input wire clk,
    input wire reset,
    input wire load,
    input wire [3:0] data_in,
    output wire data_out
);
    reg [3:0] shift_reg;

    always @(posedge clk or posedge reset) begin
        if (reset)
            shift_reg <= 4'b0000;
        else if (load)
            shift_reg <= data_in; 
        else
            shift_reg <= {shift_reg[2:0], 1'b0};  
    end

    assign data_out = shift_reg[3];  
endmodule






module piso_left_shift (
    input wire clk,
    input wire rst,
    input wire load,               // Load control: 1 = load, 0 = shift
    input wire [3:0] data_in,      // Parallel input
    output reg sout                // Serial output (MSB)
);

    reg [3:0] shift_reg;           // Internal 4-bit register

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            shift_reg <= 4'b0000;
            sout <= 1'b0;
        end else if (load) begin
            shift_reg <= data_in;             // Load 4-bit input
        end else begin
            sout <= shift_reg[3];             // Output MSB
            shift_reg <= shift_reg << 1;      // Left shift by 1 bit
        end
    end

endmodule
