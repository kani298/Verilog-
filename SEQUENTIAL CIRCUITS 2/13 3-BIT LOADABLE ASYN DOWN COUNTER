module loadable_async_down_counter_3bit (
    input wire clk,
    input wire reset,
    input wire load,
    input wire [2:0] data_in,
    output reg q0,q1,q2
);

    
    
    always @(negedge clk or negedge reset) begin
        if (!reset)
            q[0] <= 1'b1;
        else if (load)
            q[0] <= data_in[0];
        else
            q[0] <= ~q[0];
    end

    always @(posedge q[0] or negedge reset) begin
        if (!reset)
            q[1] <= 1'b1;
        else if (load)
            q[1] <= data_in[1];
        else
            q[1] <= ~q[1];
    end

    always @(posedge q[1] or negedge reset) begin
        if (!reset)
            q[2] <= 1'b1;
        else if (load)
            q[2] <= data_in[2];
        else
            q[2] <= ~q[2];
    end
 

endmodule

