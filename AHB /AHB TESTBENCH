module tb_ahb;
    reg clk, reset;

    // Internal wires to observe all signals
    wire [1:0] req, grant, fault_flag;
    wire [2:0] ready_slave;
    wire [31:0] addr_m0, addr_m1;
    wire [31:0] wdata_m0, wdata_m1;
    wire [31:0] rdata_m0, rdata_m1;
    wire write_m0, write_m1;
    wire [2:0] sel;

    // Instantiate two master modules for signal tapping
    wire dummy_req0, dummy_req1;
    wire dummy_write0, dummy_write1;

    // Instantiate top module
    ahb_top dut (
        .clk(clk),
        .reset(reset)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk;
    end

    // Reset logic
    initial begin
        reset = 1;
        #15 reset = 0;
    end

    // Simulation time limit
    initial begin
        #200 $finish;
    end

    // Monitor all signals of interest
    initial begin
        $monitor("T=%0t | reset=%0b | req={%0b,%0b} | grant={%0b,%0b} | fault_flag={%0b,%0b} | sel={%0b} | write={%0b,%0b} | addr={%h,%h} | wdata={%h,%h} | rdata={%h,%h} | ready_slave={%b}",
                 $time, reset,
                 dut.req[1], dut.req[0],
                 dut.grant[1], dut.grant[0],
                 dut.fault_flag[1], dut.fault_flag[0],
                 dut.sel,
                 dut.write[1], dut.write[0],
                 dut.addr[1], dut.addr[0],
                 dut.wdata[1], dut.wdata[0],
                 dut.rdata[1], dut.rdata[0],
                 dut.ready_slave
        );
    end
endmodule
